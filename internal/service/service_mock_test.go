// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock_test.go -package=service_test
//

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/pprishchepa/go-bank-example/domain"
	service "github.com/pprishchepa/go-bank-example/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletStoreTx is a mock of WalletStoreTx interface.
type MockWalletStoreTx struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStoreTxMockRecorder
}

// MockWalletStoreTxMockRecorder is the mock recorder for MockWalletStoreTx.
type MockWalletStoreTxMockRecorder struct {
	mock *MockWalletStoreTx
}

// NewMockWalletStoreTx creates a new mock instance.
func NewMockWalletStoreTx(ctrl *gomock.Controller) *MockWalletStoreTx {
	mock := &MockWalletStoreTx{ctrl: ctrl}
	mock.recorder = &MockWalletStoreTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletStoreTx) EXPECT() *MockWalletStoreTxMockRecorder {
	return m.recorder
}

// AddCreditEntry mocks base method.
func (m *MockWalletStoreTx) AddCreditEntry(ctx context.Context, entry domain.CreditEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCreditEntry", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCreditEntry indicates an expected call of AddCreditEntry.
func (mr *MockWalletStoreTxMockRecorder) AddCreditEntry(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCreditEntry", reflect.TypeOf((*MockWalletStoreTx)(nil).AddCreditEntry), ctx, entry)
}

// AddDebitEntry mocks base method.
func (m *MockWalletStoreTx) AddDebitEntry(ctx context.Context, entry domain.DebitEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDebitEntry", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDebitEntry indicates an expected call of AddDebitEntry.
func (mr *MockWalletStoreTxMockRecorder) AddDebitEntry(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDebitEntry", reflect.TypeOf((*MockWalletStoreTx)(nil).AddDebitEntry), ctx, entry)
}

// Commit mocks base method.
func (m *MockWalletStoreTx) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockWalletStoreTxMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockWalletStoreTx)(nil).Commit), ctx)
}

// GetBalance mocks base method.
func (m *MockWalletStoreTx) GetBalance(ctx context.Context, walletID int) (*domain.WalletBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, walletID)
	ret0, _ := ret[0].(*domain.WalletBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletStoreTxMockRecorder) GetBalance(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletStoreTx)(nil).GetBalance), ctx, walletID)
}

// Rollback mocks base method.
func (m *MockWalletStoreTx) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockWalletStoreTxMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockWalletStoreTx)(nil).Rollback), ctx)
}

// SaveBalance mocks base method.
func (m *MockWalletStoreTx) SaveBalance(ctx context.Context, balance *domain.WalletBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalance indicates an expected call of SaveBalance.
func (mr *MockWalletStoreTxMockRecorder) SaveBalance(ctx, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalance", reflect.TypeOf((*MockWalletStoreTx)(nil).SaveBalance), ctx, balance)
}

// MockWalletStoreTxFactory is a mock of WalletStoreTxFactory interface.
type MockWalletStoreTxFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStoreTxFactoryMockRecorder
}

// MockWalletStoreTxFactoryMockRecorder is the mock recorder for MockWalletStoreTxFactory.
type MockWalletStoreTxFactoryMockRecorder struct {
	mock *MockWalletStoreTxFactory
}

// NewMockWalletStoreTxFactory creates a new mock instance.
func NewMockWalletStoreTxFactory(ctrl *gomock.Controller) *MockWalletStoreTxFactory {
	mock := &MockWalletStoreTxFactory{ctrl: ctrl}
	mock.recorder = &MockWalletStoreTxFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletStoreTxFactory) EXPECT() *MockWalletStoreTxFactoryMockRecorder {
	return m.recorder
}

// NewTx mocks base method.
func (m *MockWalletStoreTxFactory) NewTx(ctx context.Context) (service.WalletStoreTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTx", ctx)
	ret0, _ := ret[0].(service.WalletStoreTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewTx indicates an expected call of NewTx.
func (mr *MockWalletStoreTxFactoryMockRecorder) NewTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTx", reflect.TypeOf((*MockWalletStoreTxFactory)(nil).NewTx), ctx)
}

// MockWalletCacheStore is a mock of WalletCacheStore interface.
type MockWalletCacheStore struct {
	ctrl     *gomock.Controller
	recorder *MockWalletCacheStoreMockRecorder
}

// MockWalletCacheStoreMockRecorder is the mock recorder for MockWalletCacheStore.
type MockWalletCacheStoreMockRecorder struct {
	mock *MockWalletCacheStore
}

// NewMockWalletCacheStore creates a new mock instance.
func NewMockWalletCacheStore(ctrl *gomock.Controller) *MockWalletCacheStore {
	mock := &MockWalletCacheStore{ctrl: ctrl}
	mock.recorder = &MockWalletCacheStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletCacheStore) EXPECT() *MockWalletCacheStoreMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockWalletCacheStore) GetBalance(ctx context.Context, walletID int) (*domain.WalletBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, walletID)
	ret0, _ := ret[0].(*domain.WalletBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletCacheStoreMockRecorder) GetBalance(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletCacheStore)(nil).GetBalance), ctx, walletID)
}

// SaveBalance mocks base method.
func (m *MockWalletCacheStore) SaveBalance(ctx context.Context, balance *domain.WalletBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalance indicates an expected call of SaveBalance.
func (mr *MockWalletCacheStoreMockRecorder) SaveBalance(ctx, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalance", reflect.TypeOf((*MockWalletCacheStore)(nil).SaveBalance), ctx, balance)
}
