// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=storage_mock_test.go -package=domain_test
//

// Package domain_test is a generated GoMock package.
package domain_test

import (
	context "context"
	reflect "reflect"

	domain "github.com/pprishchepa/go-casino-example/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletStore is a mock of WalletStore interface.
type MockWalletStore struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStoreMockRecorder
}

// MockWalletStoreMockRecorder is the mock recorder for MockWalletStore.
type MockWalletStoreMockRecorder struct {
	mock *MockWalletStore
}

// NewMockWalletStore creates a new mock instance.
func NewMockWalletStore(ctrl *gomock.Controller) *MockWalletStore {
	mock := &MockWalletStore{ctrl: ctrl}
	mock.recorder = &MockWalletStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletStore) EXPECT() *MockWalletStoreMockRecorder {
	return m.recorder
}

// AddCreditEntry mocks base method.
func (m *MockWalletStore) AddCreditEntry(ctx context.Context, entry domain.CreditEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCreditEntry", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCreditEntry indicates an expected call of AddCreditEntry.
func (mr *MockWalletStoreMockRecorder) AddCreditEntry(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCreditEntry", reflect.TypeOf((*MockWalletStore)(nil).AddCreditEntry), ctx, entry)
}

// AddDebitEntry mocks base method.
func (m *MockWalletStore) AddDebitEntry(ctx context.Context, entry domain.DebitEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDebitEntry", ctx, entry)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDebitEntry indicates an expected call of AddDebitEntry.
func (mr *MockWalletStoreMockRecorder) AddDebitEntry(ctx, entry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDebitEntry", reflect.TypeOf((*MockWalletStore)(nil).AddDebitEntry), ctx, entry)
}

// GetBalance mocks base method.
func (m *MockWalletStore) GetBalance(ctx context.Context, walletID int) (*domain.WalletBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, walletID)
	ret0, _ := ret[0].(*domain.WalletBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletStoreMockRecorder) GetBalance(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletStore)(nil).GetBalance), ctx, walletID)
}

// SaveBalance mocks base method.
func (m *MockWalletStore) SaveBalance(ctx context.Context, balance *domain.WalletBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBalance", ctx, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBalance indicates an expected call of SaveBalance.
func (mr *MockWalletStoreMockRecorder) SaveBalance(ctx, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBalance", reflect.TypeOf((*MockWalletStore)(nil).SaveBalance), ctx, balance)
}
